version: '3.8'

services:
  crypto-digest:
    build: .
    container_name: crypto-digest-service
    restart: unless-stopped
    
    environment:
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4}
      
      # Remote MCP Server URLs (HTTPS endpoints accessible from OpenAI cloud)
      MCP_WEB3_URL: ${MCP_WEB3_URL}
      MCP_WHITEPAPER_URL: ${MCP_WHITEPAPER_URL}
      
      # Direct Telegram API Integration
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_USER_ID: ${TELEGRAM_USER_ID}
      
      # Scheduling Configuration
      SCHEDULE_HOUR: ${SCHEDULE_HOUR:-22}
      SCHEDULE_MINUTE: ${SCHEDULE_MINUTE:-0}
      
      # System Configuration
      TZ: Europe/Amsterdam
      PYTHONUNBUFFERED: 1
    
    volumes:
      # Persist logs
      - ./logs:/var/log
      # Persist response ID cache
      - ./cache:/tmp
    
    # Use APScheduler by default
    command: ["python", "scheduler.py"]
    
    # Uncomment below for cron-based scheduling instead
    # command: ["sh", "-c", "cron && tail -f /var/log/app.log"]
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Test service for immediate execution
  crypto-digest-test:
    build: .
    container_name: crypto-digest-test
    profiles: ["test"]  # Only runs when specifically requested
    
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4}
      MCP_WEB3_URL: ${MCP_WEB3_URL}
      MCP_WHITEPAPER_URL: ${MCP_WHITEPAPER_URL}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_USER_ID: ${TELEGRAM_USER_ID}
      TZ: Europe/Amsterdam
    
    volumes:
      - ./logs:/var/log
      - ./cache:/tmp
    
    command: ["python", "scheduler.py", "--test"]

